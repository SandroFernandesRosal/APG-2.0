generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
 
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MEMBRO
}

enum MinistryRole {
  VILADAPENHA
  TOMAZINHO
  MARIAHELENA
}


enum CargoRole {
  PASTOR
  DIACONO
  PRESBITERO
  EVANGELISTA
  MISSIONARIO
  SECRETARIO
  TESOUREIRO
  PASTOR_PRESIDENTE
  PASTOR_DIRIGENTE
  MUSICO
  AUXILIAR
}

model User {
  id                  String                @id @default(uuid())
  login               String                @unique
  name                String?
  avatarUrl           String?
  password            String
  role                UserRole              @default(MEMBRO)
  ministryRole        MinistryRole? 
  expires             DateTime?
  agenda              Agenda[]
  contato             Contato[]
  doacao              Doacao[]
  endereco            Endereco[]
  ministerio          Ministerio[]
  cargo              CargoRole[]
  news                New[]
  PasswordResetToken  PasswordResetToken[]
  refreshToken        RefreshToken[]
  sobre               Sobre[]
  sobreLider          SobreLider[]
  testemunhos         Testemunho[]
}

model New {
  id        String        @id @default(uuid())
  userId    String
  coverUrl  String?
  videoUrl  String?
  content   String
  title     String
  createdAt DateTime      @default(now())
  isPublic  Boolean       @default(true)
  page      String
  updatedAt DateTime      @updatedAt
  destaque  Boolean       @default(false)
  url       String        @unique
  role      MinistryRole
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ministerio {
  id        String        @id @default(uuid())
  userId    String
  name      String
  title     String
  local     String
  isPublic  Boolean       @default(true)
  createdAt DateTime      @default(now())
  coverUrl  String
  updatedAt DateTime      @updatedAt
  role      MinistryRole
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Agenda {
  id        String        @id @default(uuid())
  userId    String
  day       String
  name      String
  hour      String
  isPublic  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  destaque  Boolean       @default(false)
  role      MinistryRole
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doacao {
  id        String   @id @default(uuid())
  userId    String
  local     String
  banco     String
  conta     String
  agencia   String
  nomebanco String
  pix       String
  nomepix   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Endereco {
  id        String   @id @default(uuid())
  userId    String
  local     String
  rua       String
  cep       String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  numero    String?
  cidade    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contato {
  id        String   @id @default(uuid())
  userId    String
  local     String
  whatsapp  String
  facebook  String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  instagram String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sobre {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SobreLider {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  name      String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Testemunho {
  id        String   @id @default(uuid())
  userId    String
  name      String
  avatarUrl String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  coverUrl  String?
  ministryRole  MinistryRole?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}