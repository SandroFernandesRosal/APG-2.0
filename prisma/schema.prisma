generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
 
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MEMBRO
}


model Igreja {
  id          String   @id @default(uuid())
  nome        String   // Vila da Penha, Tomazinho, etc.
  slug        String   @unique // vila-da-penha, tomazinho, etc.
  ativa       Boolean  @default(true)
  // Campos de endereço
  endereco    String?  // Endereço completo da igreja
  descricao   String?  // Descrição do ponto de encontro
  tipo        String?  // "Sede" ou "Filial"
  // Campos de doação
  banco       String?  // Nome do banco
  conta       String?  // Número da conta
  agencia     String?  // Agência
  nomebanco   String?  // Nome do beneficiário (banco)
  pix         String?  // Chave PIX
  nomepix     String?  // Nome do beneficiário (PIX)
  // Campos de contato
  telefone    String?  // Número de telefone
  whatsapp    String?  // WhatsApp
  facebook    String?  // Facebook
  youtube     String?  // YouTube
  instagram   String?  // Instagram
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  users       User[]
  news        New[]
  ministerios Ministerio[]
  agendas     Agenda[]
  testemunhos Testemunho[]
}


enum CargoRole {
  PASTOR
  DIACONO
  PRESBITERO
  EVANGELISTA
  MISSIONARIO
  SECRETARIO
  TESOUREIRO
  PASTOR_PRESIDENTE
  PASTOR_DIRIGENTE
  MUSICO
  AUXILIAR
}

model User {
  id                  String                @id @default(uuid())
  login               String                @unique
  name                String?
  avatarUrl           String?
  password            String
  role                UserRole              @default(MEMBRO)
  igrejaId            String? // Nova estrutura
  expires             DateTime?
  agenda              Agenda[]
  contato             Contato[]
  ministerio          Ministerio[]
  cargo              CargoRole[]
  news                New[]
  PasswordResetToken  PasswordResetToken[]
  refreshToken        RefreshToken[]
  sobre               Sobre[]
  sobreLider          SobreLider[]
  testemunhos         Testemunho[]
  auditLogs           AuditLog[]
  bibleFavorites      BibleFavorite[]
  bibleReadingPlan    BibleReadingPlan?
  bibleReadChapters   BibleReadChapter[]
  bibleReadVerses     BibleReadVerse[]
  
  // Relacionamentos
  igreja              Igreja? @relation(fields: [igrejaId], references: [id])
}

model New {
  id        String        @id @default(uuid())
  userId    String
  coverUrl  String?
  videoUrl  String?
  content   String
  title     String
  createdAt DateTime      @default(now())
  isPublic  Boolean       @default(true)
  page      String
  updatedAt DateTime      @updatedAt
  destaque  Boolean       @default(false)
  url       String        @unique
  igrejaId  String? // Nova estrutura
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  igreja    Igreja?       @relation(fields: [igrejaId], references: [id])
}

model Ministerio {
  id        String        @id @default(uuid())
  userId    String
  name      String
  title     String
  local     String
  isPublic  Boolean       @default(true)
  createdAt DateTime      @default(now())
  coverUrl  String
  updatedAt DateTime      @updatedAt
  igrejaId  String? // Nova estrutura
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  igreja    Igreja?       @relation(fields: [igrejaId], references: [id])
}

model Agenda {
  id        String        @id @default(uuid())
  userId    String
  day       String
  name      String
  hour      String
  isPublic  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  destaque  Boolean       @default(false)
  igrejaId  String? // Nova estrutura
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  igreja    Igreja?       @relation(fields: [igrejaId], references: [id])
}


model Contato {
  id        String   @id @default(uuid())
  userId    String
  local     String
  whatsapp  String
  facebook  String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  instagram String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sobre {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SobreLider {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  name      String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Testemunho {
  id        String   @id @default(uuid())
  userId    String
  name      String
  avatarUrl String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  coverUrl  String?
  igrejaId  String? // Nova estrutura
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  igreja    Igreja?  @relation(fields: [igrejaId], references: [id])
}

model BibleFavorite {
  id        String   @id @default(uuid())
  userId    String
  bookName  String
  chapter   Int
  verse     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookName, chapter, verse])
  @@index([userId])
}

model BibleReadingPlan {
  id            String   @id @default(uuid())
  userId        String
  totalDays     Int
  chaptersPerDay Int
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId]) // Um usuário só pode ter um plano ativo
  @@index([userId])
}

model BibleReadChapter {
  id        String   @id @default(uuid())
  userId    String
  bookName  String
  chapter   Int
  readAt    DateTime @default(now())
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookName, chapter]) // Um usuário só pode marcar um capítulo como lido uma vez
  @@index([userId])
  @@index([readAt])
}

model BibleReadVerse {
  id        String   @id @default(uuid())
  userId    String
  bookName  String
  chapter   Int
  verse     Int
  readAt    DateTime @default(now())
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, bookName, chapter, verse]) // Um usuário só pode marcar um versículo como lido uma vez
  @@index([userId])
  @@index([readAt])
}

model AuditLog {
  id          String      @id @default(cuid())
  action      String      // CREATE, UPDATE, DELETE
  entityType  String      // "User", "New", "Testemunho", "Contato", "Agenda", "Sobre", "SobreLider", "Igreja"
  entityId    String      // ID da entidade modificada
  userId      String      // Quem fez a ação
  userName    String      // Nome do usuário (para facilitar consultas)
  userRole    String      // Role do usuário no momento da ação
  oldData     Json?       // Dados antes da mudança (para UPDATE)
  newData     Json?       // Dados depois da mudança (para CREATE/UPDATE)
  changes     Json?       // Apenas os campos que mudaram (para UPDATE)
  timestamp   DateTime    @default(now())
  ipAddress   String?     // Opcional, se quiser no futuro
  userAgent   String?     // Opcional, se quiser no futuro
  
  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@index([action])
}